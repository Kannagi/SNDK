
func SNDK_Sprite:;
{
	uint16 oam;
	
	oam =? 0;
	
	SNDK_memset SNDK_OAM0.x,SNDK_OAM_INIT_DATA,0x200	
	
	SNDK_memset SNDK_OAMH,SNDK_OAM_INIT_DATA2,0x20
}

SNDK_OAM_INIT_DATA:
.data.b 0xE0;

SNDK_OAM_INIT_DATA2:
.data.b 0x00;

//---------------------------------------Engine--------------------------------------------------
// >= <

funclib SNDK_SpriteEngine_old:uint16 oam,uint16 n,uint8 ndma;
{

	lib uint16 posx,posy;
	lib uint8 tile,attribute;
	
	uint16 dma_count;
	
	if n >= 16
	{
		n = 16;
	}
	
	if n == 0
	{
		return;
	}
	
	if n & 1
	{
		return;
	}
	
	MODE16
	//--------------
	
	
	idy = n;
	idx = 0;
	SNDK_Sprite.oam = oam<<2;
	
	do
	{			
		[SNDK_SPRITE.x,idx]  +=  [SNDK_SPRITE.vx,idx];
		posx = acc>>2;
		
		[SNDK_SPRITE.y,idx]  +=  [SNDK_SPRITE.vy,idx];
		posy = acc>>2;
		
		tile = [SNDK_SPRITE.t,idx] ;
		
		asm "phx";
		
		call SNDK_SpriteEngineDraw:;

		SNDK_Sprite.oam += 0x10;
		asm "plx";
		
		
		idx+= 0x20;
	}
	loop idy == 0
	
	
	
	//DMA auto
	lib uint16 list,add,ianim,oldx,lista;
	lib uint8 nanim,index;
	
	
	//DMA1
	idx = dma_count << 5;
	oldx = idx;
	
	index = [SNDK_SPRITE.index,idx];
	ianim = [SNDK_SPRITE.ianim,idx];
	[SNDK_SPRITE.ianim,idx] = ianim + 2;
	list = [SNDK_SPRITE.list,idx];
	lista = [0x830004,list];
	
	nanim = [0x830000,lista];
	idx = lista + ianim;
	add = [0x830002,idx] + index;	
	
	idx = list;
	SNDK_VBlank.dma_spr1.addr = [0x830000,idx] + add;
	SNDK_VBlank.dma_spr1.size = [0x83000A,idx];
	SNDK_VBlank.dma_spr1.add = [0x83000C,idx];
	SNDK_VBlank.dma_spr1.vmaddr = [0x830008,idx];
	
	MODE8
	
	SNDK_VBlank.dma_spr1.bank = [0x830002,idx];
	SNDK_VBlank.dma_spr1.channel = [0x83000E,idx];

	if ianim == nanim
	{
		[SNDK_SPRITE.ianim,oldx] = 0;
	}

	//DMA2
	MODE16
	oldx += 0x20;
	idx = oldx;
	
	acc = ndma&3;
	if acc == 2
	{
		ianim = [SNDK_SPRITE.ianim,idx];
		[SNDK_SPRITE.ianim,idx] = ianim + 2;
		list = [SNDK_SPRITE.list,idx];
		lista = [0x830004,list];
		
		nanim = [0x830000,lista];
		idx = lista + ianim;
		add = [0x830002,idx];	
		
		SNDK_VBlank.dma_spr2.addr = [0x830000,idx] + add;
		SNDK_VBlank.dma_spr2.size = [0x83000A,idx];
		SNDK_VBlank.dma_spr2.add = [0x83000C,idx];
		SNDK_VBlank.dma_spr2.vmaddr = [0x830008,idx];
	}

	
	MODE8

	if ndma == 2
	{
		SNDK_VBlank.dma_spr2.bank = [0x830002,idx];
		SNDK_VBlank.dma_spr2.channel = [0x83000E,idx];
		
		if ianim == nanim
		{
			[SNDK_SPRITE.ianim,oldx] = 0;
		}
	}
	
	
	//DMA end
	dma_count +=ndma;
	if dma_count >= n
	{
		dma_count = 0;
	}
}

//---------------------------------------MODE--------------------------------------------------

funclib SNDK_SpriteEngineDraw_old:;
{
	lib uint16 posx,posy;
	lib uint8 tile,attribute;
	lib uint16 posxh,indexh;
	
	MODE16
	acc = posy + 0xC020;
	if acc & 0x3F00
	{
		return;
	}
	
	posxh = 0;
	idx = SNDK_Sprite.oam;
	indexh = idx>>4;
	
	acc = posx + 0xC010;
	if acc ?= 0
	{
		posxh = 0x11;
	}else
	{
		acc += 0x10;
		if acc ?= 0
		{
			posxh = 0x55;
		}else
		{
			acc -= 0x20;
			if acc & 0x3F00
			{
				return;
			}
			
		}

	}	

	MODE8
	/*
	[SNDK_OAM0.x,idx] = posx;
	[SNDK_OAM0.y,idx] = posy;
	[SNDK_OAM0.t,idx] = tile;
	[SNDK_OAM0.a,idx] = attribute;
	*/
	
	
	[SNDK_OAM0.y,idx] = posy;
	[SNDK_OAM1.y,idx] = acc;
	[SNDK_OAM2.y,idx] = acc+SNDK_SPR_SIZE;
	[SNDK_OAM3.y,idx] = acc;
	
	[SNDK_OAM0.x,idx] = posx;
	[SNDK_OAM2.x,idx] = acc;
	
	
	acc += SNDK_SPR_SIZE;
	if acc ?! 0
	{
		[SNDK_OAM1.x,idx] = acc;
		[SNDK_OAM3.x,idx] = acc;
	}else
	{
		if posxh == 0x11
		{
			[SNDK_OAM1.x,idx] = posx + SNDK_SPR_SIZE;
			[SNDK_OAM3.x,idx] = acc;
		}else
		{
			[SNDK_OAM1.y,idx] = 0xE0;
			[SNDK_OAM3.y,idx] = 0xE0;
		}
	}
	
	[SNDK_OAM0.t,idx] = tile;
	[SNDK_OAM1.t,idx] = acc+SNDK_SPR_SIZET;
	[SNDK_OAM2.t,idx] = tile+SNDK_SPR_DEC;
	[SNDK_OAM3.t,idx] = acc+SNDK_SPR_SIZET;
	
	[SNDK_OAM0.a,idx] = attribute;
	[SNDK_OAM1.a,idx] = acc;
	[SNDK_OAM2.a,idx] = acc;
	[SNDK_OAM3.a,idx] = acc;
	
	[SNDK_OAMH,indexh] = posxh;
	
	MODE16
}

//---------------------------------------Set--------------------------------------------------

funclib SNDK_SpriteEngineSetSpeed:uint16 index,uint16 mx,uint16 my;
{
	MODE16
	idx =index;
	[SNDK_SPRITE.vx,idx] = mx;
	[SNDK_SPRITE.vy,idx] = my;
	
	MODE8
}

funclib SNDK_SpriteEngineSetPosition:uint16 index,uint16 px,uint16 py;
{
	MODE16
	idx =index;
	[SNDK_SPRITE.x,idx] = px<<2;
	[SNDK_SPRITE.y,idx] = py<<2;
	MODE8
}


//---------------------------------------Get--------------------------------------------------


//---------------------------------------Draw--------------------------------------------------


funclib SNDK_SpriteDraw:uint8 position.x,uint8 position.y,uint8 tile,uint8 attribute;
{
	idx = SNDK_Sprite.oam;
	[SNDK_OAM0.x,idx] = position.x;
	[SNDK_OAM0.y,idx] = position.y;
	[SNDK_OAM0.t,idx] = tile;
	[SNDK_OAM0.a,idx] = attribute;
	
	SNDK_Sprite.oam = idx + 4;
}



funclib SNDK_SpriteDrawMeta2x2:uint8 position.x,uint8 position.y,uint8 tile,uint8 attribute;
{
	idx = SNDK_Sprite.oam;
	
	[SNDK_OAM0.x,idx] = position.x;
	[SNDK_OAM2.x,idx] = acc;
	[SNDK_OAM1.x,idx] = acc+SNDK_SPR_SIZE;
	[SNDK_OAM3.x,idx] = acc;
	
	[SNDK_OAM0.y,idx] = position.y;
	[SNDK_OAM1.y,idx] = acc;
	[SNDK_OAM2.y,idx] = acc+SNDK_SPR_SIZE;
	[SNDK_OAM3.y,idx] = acc;
	
	[SNDK_OAM0.t,idx] = tile;
	[SNDK_OAM1.t,idx] = acc+SNDK_SPR_SIZET;
	[SNDK_OAM2.t,idx] = tile+SNDK_SPR_DEC;
	[SNDK_OAM3.t,idx] = acc+SNDK_SPR_SIZET;
	
	[SNDK_OAM0.a,idx] = attribute;
	[SNDK_OAM1.a,idx] = acc;
	[SNDK_OAM2.a,idx] = acc;
	[SNDK_OAM3.a,idx] = acc;
	
	MODE16
	SNDK_Sprite.oam = idx + 16;
	MODE8
}
