
func SNDK_Init:;
{
	BGMODE = SNDK_MODE1;
	MOSAIC = 0x00;
	BG1SC = 0x54;
	BG2SC = 0x58;
	BG3SC = 0x5C;
	BG4SC = 0x50;
	BG12NBA = 0x00; //address BG1,2 $0000
	BG34NBA = 0x44; //address BG3,4 $4000
	
	BG3H0FS = 0;
	BG3H0FS = 0;
	
	BG3V0FS = 0;
	BG3V0FS = 0;
	
	BG4H0FS = 0;
	BG4H0FS = 0;
	
	BG4V0FS = 0;
	BG4V0FS = 0;
	
	VMAINC = 0x80;
	TM = 0x17; //bg 1,2,3 ,obj enable
	COLDATA = 0xE0;
	WRIO = 0xFF;
	NMITIMEN  = 0x00; //Disable all
	SETINI = 0;
		
	TS = 0x00;
	CGSWSEL = 0x00;
	CGADSUB = 0x00;
	
	W12SEL = 0;
	W34SEL = 0;
	WOBJSEL = 0;
	M7SEL = 0;	
	TMW = 0;
	TSW = 0;
	
	WH0 = 0;
	WH1 = 0;
	WH2 = 0;
	WH3 = 0;
	
	WBGLOG = 0;
	WOBJLOG = 0;
	
	M7A = 0;
	M7B = 0;
	M7C = 0;
	M7D = 0;
	M7X = 0;
	M7Y = 0;
	
	
	idx = 0;
	HDMA_BANK_0 = 0;
	HDMA_ADD_0 = idx;
	HDMA_LINE_0 = idx;
	
	HDMA_BANK_1 = 0;
	HDMA_ADD_1 = idx;
	HDMA_LINE_1 = idx;
	
	HDMA_BANK_2 = 0;
	HDMA_ADD_2 = idx;
	HDMA_LINE_2 = idx;
	
	HDMA_BANK_3 = 0;
	HDMA_ADD_3 = idx;
	HDMA_LINE_3 = idx;
	
	HDMA_BANK_4 = 0;
	HDMA_ADD_4 = idx;
	HDMA_LINE_4 = idx;
	
	HDMA_BANK_5 = 0;
	HDMA_ADD_5 = idx;
	HDMA_LINE_5 = idx;
	
	HDMA_BANK_6 = 0;
	HDMA_ADD_6 = idx;
	HDMA_LINE_6 = idx;
	
	HDMA_BANK_7 = 0;
	HDMA_ADD_7 = idx;
	HDMA_LINE_7 = idx;
	 
	
	DMA_0 = 0x01;
	DMA_BADD_0 = 0x18; //VMDATA $1
	
	DMA_1 = 0x01;
	DMA_BADD_1 = 0x18; //VMDATA $2
	
	DMA_2 = 0x01;
	DMA_BADD_2 = 0x18; //VMDATA $4
	
	DMA_3 = 0x01;
	DMA_BADD_3 = 0x18; //VMDATA $8
	
	DMA_4 = 0x02;
	DMA_BADD_4 = 0x04; //OAMDATA $10
	
	DMA_5 = 0x02;
	DMA_BADD_5 = 0x22; //CGDATA $20
	
	DMA_6 = 0x00;
	DMA_BADD_6 = 0x80; //WMDATA memcopy $40
	
	DMA_7 = 0x18;
	DMA_BADD_7 = 0x80; //WMDATA memset $80
	
	SNDK_memset SNDK_RAM,SNDK_INIT_DATA1,0xFE00
	//clear RAM
	MODE16

	
	//VRAM CLEAR
	idx = 0;
	acc = 0;
	VMADD = idx;
	idy = (0x1000);
	do
	{
		VMDATA =acc;
		VMDATA =acc;
		VMDATA =acc;
		VMDATA =acc;
		
		VMDATA =acc;
		VMDATA =acc;
		VMDATA =acc;
		VMDATA =acc;
	}
	loop idy == 0
	

	//init sprite engine
	idy = 16;
	idx = 0;
	do
	{
		[SNDK_SPRITE.x,idx] = (-128);
		[SNDK_SPRITE.y,idx] = (-128);

		idx += 0x20;
	}
	loop idy == 0
	
	MODE8	
	
	
	
			
	
	SNDK_SendVRAM 0x4000,DATA_FONT_SNDK_S,0x400
	
	
	SNDK_memcopy SNDK_PALBG0,DATA_FONT_SNDK_P,0x20
	

	SNDK_SendOAM
	
	
	OBJSEL = SNDK_SPR_16_32;
	SNDK_SPR_META 16,32
}
	
SNDK_INIT_DATA1:
.data.b 0;

func SNDK_ModeAlpha:;
{
	TS = 0x11;
	CGSWSEL = 0x02;
	CGADSUB = 0x42;
}





funclib tesss:uint8 ok;
{
	spm uint8 ok1;
	lib uint8 ok2;
	ok = ok1 + ok2;;
	
	spm uint16 address;
	spm uint8 bank,tmp;
	idy = $text_hello:;
	address = idy;
	address = #text_hello:;
	
	idx = 0;
	spm uint16 idx1,idx2;
	idx1 = 0;
	idx2 = 0;
	do
	{
		tmp = @address;
		address +=1;

	}
	while tmp != 0
	
	
	idy = $text_hello:;
	address = idy;
	bank = #text_hello:;
	
	acc = address;
	acc = acc>>8;
	
	DMA_ADD_0 = $SNDK_BG3.t1 + address;
	
	DMA_ADD_0 = acc+ $SNDK_BG3.t1;
	idx = idx>>4;
	MODE16
	lib uint16 posxh;
	posxh = 0;
	ok1 = 5;
	ok = 8;
	
	[SNDK_OAMH,posxh] = ok;
}

DATA_FONT_SNDK_S:
.incbin "SNDK/fontm.spr"

DATA_FONT_SNDK_P:
.incbin "SNDK/fontm.pal"
.incbin "SNDK/fontm2.pal"
.incbin "SNDK/fontm3.pal"
.data.w 0x7777,0;

.org 0xFFB0
.org 0xFFC0
SNES_HEADER
