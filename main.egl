
proc main:
{
	//upload Randi hero palette
	SNDK_memcopy SNDK_PALSPR0,RANDI_PAL,0xA0
	
	//upload map VRAM
	SNDK_memcopy SNDK_PALBG1,MAP1_PAL,0xE0
	SNDK_SendVRAM 0x0000,MAP1_SPR,0x8000
	
	call testBG:
	
	
	uint8 tmp
	uint8 position.x,position.y,joypad
	
	
	uint16 vx,vy
	uint16 data_randi
	uint16 ianim,fanim
	position.x = 128;
	position.y = 128;

	MODE16
	data_randi = $RANDI_SPR:
	data_randi += 0x80
	
	
	
	
	
	MODE8
	
	
	
	
	
	
	
	
	call SNDK_PrintLine: $CPU_PER:,#CPU_PER:,23,0,SNDK_FONTPAL1;
	
	call SNDK_SpriteEngineSetPosition:SPR_INDEX_0,100,100;
	
	call SNDK_SpriteEngineSetPosition:SPR_INDEX_1,40,00;
	call SNDK_SpriteEngineSetPosition:SPR_INDEX_2,40,40;
	call SNDK_SpriteEngineSetPosition:SPR_INDEX_3,40,80;
	call SNDK_SpriteEngineSetPosition:SPR_INDEX_4,40,120;
	
	call SNDK_SpriteEngineSetPosition:SPR_INDEX_5,40,160;
	call SNDK_SpriteEngineSetPosition:SPR_INDEX_6,40,200;
	
	call SNDK_SpriteEngineSetPosition:SPR_INDEX_7,(-18),00;
	call SNDK_SpriteEngineSetPosition:SPR_INDEX_8,(-18),40;
	call SNDK_SpriteEngineSetPosition:SPR_INDEX_9,(-18),80;
	call SNDK_SpriteEngineSetPosition:SPR_INDEX_10,(-18),120;
	
	call SNDK_SpriteEngineSetPosition:SPR_INDEX_11,(-18),160;
	call SNDK_SpriteEngineSetPosition:SPR_INDEX_12,(-18),200;
	
	
	call SNDK_SpriteEngineSetPosition:SPR_INDEX_13,(160),100;
	call SNDK_SpriteEngineSetPosition:SPR_INDEX_14,(200),120;
	call SNDK_SpriteEngineSetPosition:SPR_INDEX_15,(80),40;
	
	
	
	call SNDK_DMA1: data_randi,#RANDI_SPR:,0x80,0x6000,0x200,0x0F;
	
	
	
	SNDK_SendCGRAM 0x00,SNDK_PALBG0,0x200
	INIDISP = 0x0F;
	
	SNDK_SpriteEngineSetList SPR_INDEX_0, LIST_SPR1: ,0 ,OAM_PAL0
	SNDK_SpriteEngineSetList SPR_INDEX_1, LIST_SPR2: ,4 ,OAM_PAL4
	SNDK_SpriteEngineSetList SPR_INDEX_2, LIST_SPR3: ,8 ,OAM_PAL1
	SNDK_SpriteEngineSetList SPR_INDEX_3, LIST_SPR4: ,12 ,OAM_PAL3
	
	SNDK_SpriteEngineSetList SPR_INDEX_4, LIST_SPR5: ,0x40 ,OAM_PAL4
	SNDK_SpriteEngineSetList SPR_INDEX_5, LIST_SPR6: ,0x44 ,OAM_PAL1
	SNDK_SpriteEngineSetList SPR_INDEX_6, LIST_SPR7: ,0x48 ,OAM_PAL3
	SNDK_SpriteEngineSetList SPR_INDEX_7, LIST_SPR8: ,0x4C ,OAM_PAL2
	
	SNDK_SpriteEngineSetList SPR_INDEX_8, LIST_SPR9: ,0x80 ,OAM_PAL4
	SNDK_SpriteEngineSetList SPR_INDEX_9, LIST_SPR10: ,0x84 ,OAM_PAL1
	SNDK_SpriteEngineSetList SPR_INDEX_10, LIST_SPR11: ,0x88,OAM_PAL3
	SNDK_SpriteEngineSetList SPR_INDEX_11, LIST_SPR12: ,0x8C ,OAM_PAL2
	
	SNDK_SpriteEngineSetList SPR_INDEX_12, LIST_SPR13: ,0xC0 ,OAM_PAL4
	SNDK_SpriteEngineSetList SPR_INDEX_13, LIST_SPR14: ,0xC4 ,OAM_PAL1
	SNDK_SpriteEngineSetList SPR_INDEX_14, LIST_SPR15: ,0xC8 ,OAM_PAL3
	SNDK_SpriteEngineSetList SPR_INDEX_15, LIST_SPR16: ,0xCC ,OAM_PAL2
	
	VBlank.wait = 0;
	
	do
	{
		MODE16
		//SNDK_BG1_Scroll.x += 1;
		//SNDK_BG2_Scroll.y += 2;
		MODE8
		
		idy = 0;
		idx = 0;
		if SNDK_Joypad.pad1h & SNDK_PAD_RIGHT
		{
			position.x += 1;
			idx = 0x4;
			
			MODE16
			SNDK_BG1_Scroll.x += 1;
			SNDK_BG2_Scroll.x += 1;
			MODE8
		}
		
		if SNDK_Joypad.pad1h & SNDK_PAD_LEFT
		{
			position.x -= 1
			idx = (-0x4)
			MODE16
			SNDK_BG1_Scroll.x -= 1;
			SNDK_BG2_Scroll.x -= 1;
			MODE8
		}
		
		if SNDK_Joypad.pad1h & SNDK_PAD_DOWN
		{
			position.y += 1;
			idy = 0x4;
			MODE16
			SNDK_BG1_Scroll.y += 1;
			SNDK_BG2_Scroll.y += 1;
			MODE8
		}
		
		if SNDK_Joypad.pad1h & SNDK_PAD_UP
		{
			position.y -= 1;
			idy =  (-0x4);
			MODE16
			SNDK_BG1_Scroll.y -= 1;
			SNDK_BG2_Scroll.y -= 1;
			MODE8
		}
		vx = idx;
		vy = idy;
		
		call SNDK_SpriteEngineSetSpeed:SPR_INDEX_0,vx,vy;
		
		
		//call SNDK_PrintLine: $text_hello:,#text_hello:,0,26,SNDK_FONTPAL1;

/*
		call SNDK_Print: $text_hello:,#text_hello:,12,12,SNDK_FONTPAL1;
		call SNDK_Print: $text_hello:,#text_hello:,12,12,SNDK_FONTPAL1;
		call SNDK_PrintLine: $text_hello:,#text_hello:,12,5,SNDK_FONTPAL1;
		call SNDK_PrintLine: $text_hello:,#text_hello:,12,5,SNDK_FONTPAL1;

		call SNDK_Print: $text_hello:,#text_hello:,12,12,SNDK_FONTPAL1;
		
		call SNDK_Print: $text_hello:,#text_hello:,12,12,SNDK_FONTPAL1;
		
		call SNDK_Print: $text_hello:,#text_hello:,12,12,SNDK_FONTPAL1;
		
		call SNDK_Print: $text_hello:,#text_hello:,12,12,SNDK_FONTPAL1;
	
*/
		//position.x += 1;
		//---------
		call SNDK_Sprite:
		
		
		//[SNDK_OAMH,0] = OAM_SIZE;
		//call SNDK_SpriteDraw: position.x,position.y,0,0x00;
		//call SNDK_SpriteDrawMeta2x2: 0,position.y,0,0;
		
		//
		call SNDK_SpriteEngine:56,16,1;

		
		
		//30 FPS
		if SNDK.clockf &1
		{
			call SNDK_PrintNumber8: SNDK.cpu,27,0,SNDK_FONTPAL2
			call SNDK_PrintNumber8: position.x,2,0,SNDK_FONTPAL0;
			//call SNDK_PrintNumber8: position.y,6,0,SNDK_FONTPAL0;
			
			//call SNDK_PrintNumber8: SNDK_Joypad.pad1h,2,2,SNDK_FONTPAL0
		}
		else
		{			
			call SNDK_PrintHexa16: VBlank.time,26,1,SNDK_FONTPAL2;
		}
		
		
		call SNDK_WaitVBlank:
	}
	while 1
}


func testBG:
{
	uint8 tmp,add;
	MODE16
	VMADD = 0x5400;
	tmp = 0x20;
	add = 0;
	
	do
	{
		idy = (0x20);
		idx = add;
		do
		{
			VMDATA = [MAP1_DATAB:,idx];
			idx+=2
		}
		loop idy == 0
		add += 0x80
	
	}
	loop tmp == 0
	
	
	VMADD = 0x5800;
	tmp = 0x20;
	add = 0;
	
	do
	{
		idy = (0x20);
		idx = add;
		do
		{
			VMDATA = [MAP1_DATAA:,idx];
			idx+=2
		}
		loop idy == 0
		add += 0x80
	
	}
	loop tmp == 0
	
	

	MODE8
	
}

proc testcycle:
{
	
	WMADD =? 0x100;
	WMADDH = 12;
	
	DMA_BANK_6 = 14;
	
	DMA_ADD_6 =? 8000;
	
	DMA_SIZE_6 =? 20;
	
	MDMAEN = 0x40;

}


func draw_text:
{


}

text_hello:
.data.s "HELLO WORLD
OK
TEST 12345
(0XFFFF) ! ?"
CPU_PER:
.data.s "CPU:000!"
